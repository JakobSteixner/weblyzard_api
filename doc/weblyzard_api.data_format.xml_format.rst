webLyzard XML Format
====================

The webLyzard XML format is generated by the Jeremia Web service and encodes the following information:

* the document language (language detection)
* the document's nilsimsa hash (locality sensitive hashing)
* the document's input format (``dc:format``), creator (``dc:creator``), related named entities (``dc:related``)
* a list of all sentences used in the document (sentence splitting) including
   
    * the sentence's MD5 sum
    * an indication of whether the sentence is part of the document title
    * sentence tokens
    * part-of-speech tags (part of speech tagging)
    * dependencies (dependency parsing)
    * semantic orientation (text sentiment)
    * the sentence's significance (for the given domain)
   

Example webLyzard XML file:

.. literalinclude:: weblyzard_example.xml
   :language: xml


Dependency trees:
-----------------

* ``wl:dependency`` describes the sentences' dependency structure. It consists of an integer and a string, concatenated by a column: ``int:str``. The number refers to the current token's parent in the dependency tree. The string is the label/type of the dependency relationship, e.g. ``nsubjpass``. 
* Special values:

  * ``-1``: root node
  * ``-2``: no parent could be determined
  
* Example:

  * Text: ``Ana loves Tom``, wl:dependency: ``1:SBJ -1:ROOT 1:OBJ``
  * Tree: "Anna -> loves <- Tom"

Changelog
---------

- use http://www.weblyzard.com/wl/2013# as default namespace
- include the dublin core namespace
    - use dc:title rather than title
    - use dc:format rather than `content_type`
    - Support the following constructs:
        -   use dc:creator to refer to authors
        -   use dc:coverage to refer to companies, organizations and locations covered in the article
        -   multiple entries are separated by spaces
    - Field names for document objects
       - content_id -> wl:id
       - content_type -> dc:format
- 22 August 2014: add `wl:dependency` for dependency tries.
- Python related changes
    - Document object ``{'content_id': 12, 'content_type': 'text/html' ... } -> {'id': 12, 'format': 'text/html', ...}``
    - Justification
      - wl:id is required, i.e. the use of a proper namespace; the use of xml:id is not possible, because the XML Schema specification requires its values to be from type NCName (which does not allows values to start with a number!).
      - dc:format is a standardized identifier for the content type
- **26 January 2015**: Changed dependency format to include dependency labels.
